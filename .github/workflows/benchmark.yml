name: Benchmark Regression Analysis

on:
    workflow_dispatch:
        inputs:
            target_ref:
                description: 'SHA commit to benchmark.'
                required: false
                default: ''
                type: string
            
            benchmark_type:
                description: 'Type of benchmark to run'
                required: true
                default: 'full'
                type: choice
                options:
                    - 'full'
                    - 'simple'
            
            filter:
                description: 'Filter tests by name pattern (eg. "TestPartialTraceBenchmarks")'
                required: false
                default: ''
                type: string
            
            function:
                description: 'Filter tests by function pattern (eg. "test_bench__partial_trace__vary__dim")'
                required: false
                default: ''
                type: string
            
            save_results:
                description: 'Save benchmark results to storage'
                required: false
                default: true
                type: boolean
            
            fail_on_regression:
                description: 'Fail the workflow if regressions are detected'
                required: false
                default: true
                type: boolean
            
            regression_threshold:
                description: 'Regression threshold percentage (e.g., 10 for 10%)'
                required: false
                default: '10'
                type: string
            
    pull_request:
        branches:
            - master

env:
    PYTHON_VERSION: '3.11'
    BASE_BENCHMARK_FILE: "benchmarks/baseline.json"
    BENCHMARK_FILE_TOQITO: "toqito-bench/scripts/benchmark_toqito.py"
    BENCHMARK_STORAGE: "results"
    BENCHMARK_DIR: "scripts"


jobs:
  benchmark-regression:
    runs-on: ubuntu-latest
    
    #steps:
    # - name: Determine target reference
    #   id: target-ref
    #   run: |
    #     if [ -n "${{ github.event.inputs.target_ref }}" ]; then
    #       echo "ref=${{ github.event.inputs.target_ref }}" >> $GITHUB_OUTPUT
    #       echo "Benchmarking specified reference: ${{ github.event.inputs.target_ref }}"
    #     else
    #       echo "ref=${{ github.sha }}" >> $GITHUB_OUTPUT
    #       echo "Benchmarking current commit: ${{ github.sha }}"
    #     fi

    steps:
    - name: Set default values for all trigger types
      id: defaults
      run: |

        echo "benchmark_type=${{ github.event.inputs.benchmark_type || 'full' }}" >> $GITHUB_OUTPUT
        echo "filter=${{ github.event.inputs.filter || '' }}" >> $GITHUB_OUTPUT
        echo "function=${{ github.event.inputs.function || '' }}" >> $GITHUB_OUTPUT
        echo "save_results=${{ github.event.inputs.save_results || 'true' }}" >> $GITHUB_OUTPUT
        echo "fail_on_regression=${{ github.event.inputs.fail_on_regression || 'true' }}" >> $GITHUB_OUTPUT  
        echo "regression_threshold=${{ github.event.inputs.regression_threshold || '10' }}" >> $GITHUB_OUTPUT
        

        if [ -n "${{ github.event.inputs.target_ref }}" ]; then
          echo "target_ref=${{ github.event.inputs.target_ref }}" >> $GITHUB_OUTPUT
          echo " Using specified reference: ${{ github.event.inputs.target_ref }}"
        else
          echo "target_ref=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo " Using current commit: ${{ github.sha }}"
        fi
        
        # Log the trigger type for debugging
        echo " Workflow triggered by: ${{ github.event_name }}"


    
    - name: Checkout toqito repository at the current/mentioned commit
      uses: actions/checkout@v4
      with:
        path: toqito
        ref: ${{ steps.defaults.outputs.target_ref }}
        fetch-depth: 0
    
    - name: Display benchmark target info
      run: |
        cd toqito
        echo "  BENCHMARK TARGET INFORMATION"
        echo "================================"
        echo "Repository: vprusso/toqito"
        echo "Reference: ${{ steps.defaults.outputs.target_ref }}"
        echo "Commit SHA: $(git rev-parse HEAD)"
        echo "Commit Message: $(git log -1 --pretty=format:'%s')"
        echo "Author: $(git log -1 --pretty=format:'%an <%ae>')"
        echo "Date: $(git log -1 --pretty=format:'%ad')"
        echo "Benchmark Type: ${{  steps.defaults.outputs.benchmark_type }}"
        echo "Filter Applied: ${{ steps.defaults.outputs.filter || 'none' }}"
        echo "Function Applied: ${{ steps.defaults.outputs.function || 'none' }}"
        echo "Save Results: ${{ steps.defaults.outputs.save_results }}"
        echo "Regression Threshold: ${{ steps.defaults.outputs.regression_threshold }}%"
        echo "Fail on Regression: ${{ steps.defaults.outputs.fail_on_regression  }}"
        echo "Triggered by: ${{ github.event_name }}"
        echo "================================"
    
    - name: Checkout toqito-bench repository  
      uses: actions/checkout@v4
      with:
        repository: vprusso/toqito-bench
        path: toqito-bench
        ref: post_cycle
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      run: pip install poetry
    
    - name: Setup toqito environment
      run: |
        cd toqito
        echo "Setting up toqito development environment..."
        poetry install --with dev
        poetry add pytest-benchmark --group dev pytest-memray sympy pygal
        echo "Environment setup complete"
    
    - name: Verify baseline benchmark exists
      run: |
        BASE_FILE="toqito-bench/${{ env.BASE_BENCHMARK_FILE }}"
        if [ ! -f "$BASE_FILE" ]; then
          echo "  Baseline benchmark file not found at $BASE_FILE"
          echo "Please ensure the baseline benchmark exists in the toqito-bench repository"
          exit 1
        fi
        echo "  Baseline benchmark found !"
    
    - name: Prepare benchmark environment
      run: |
        echo "üìÅ Creating benchmark directories..."

        TIMESTAMP=$(date +%Y_%m_%d__%H_%M_%S)
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

        cd toqito-bench
        mkdir -p ${{ env.BENCHMARK_STORAGE }}/toqito/full
        mkdir -p ${{ env.BENCHMARK_STORAGE }}/toqito/simple

        FILTER="${{ steps.defaults.outputs.filter }}"
        FUNCTION="${{ steps.defaults.outputs.function }}"
        if [ -n "$FILTER" ] || [ -n "$FUNCTION" ]; then
          mkdir -p "${{ env.BENCHMARK_STORAGE }}/toqito/$FILTER/$FUNCTION"
        fi

        echo "üìÅ Directory structure created"
        ls -la ${{ env.BENCHMARK_STORAGE }}/toqito/
    
    - name: Run benchmark (full)
      if: steps.defaults.outputs.benchmark_type == 'full'
      run: |
        cd toqito-bench
        echo "Running FULL benchmarks for toqito..."
        echo "Benchmark file: scripts/benchmark_toqito.py"
        echo "Filter applied: ${{ steps.defaults.outputs.filter || 'none' }}"
        echo "Function applied: ${{ steps.defaults.outputs.function || 'none' }}"
        echo "Storage: ${{ env.BENCHMARK_STORAGE }}/toqito/full"

        # Make sure toqito is on the Python path
        export PYTHONPATH="../toqito:$PYTHONPATH"

        # Use poetry from the toqito env
        cd ../toqito

        PYTEST_CMD="poetry run pytest ../toqito-bench/scripts/benchmark_toqito.py"
        if [ -n "${{ steps.defaults.outputs.filter }}" ]; then
        PYTEST_CMD="$PYTEST_CMD -k \"${{ steps.defaults.outputs.filter }}\""
        fi
        if [ -n "${{ steps.defaults.outputs.function }}" ]; then
        PYTEST_CMD="$PYTEST_CMD -m \"${{ steps.defaults.outputs.function }}\""
        fi

        PYTEST_CMD="$PYTEST_CMD \
        --benchmark-warmup=on \
        --benchmark-sort=name \
        --benchmark-columns=min,max,mean,stddev,median,iqr,outliers,ops,rounds \
        --benchmark-save=detailed_${{ env.TIMESTAMP }} \
        --benchmark-storage=$(pwd)/../toqito-bench/${{ env.BENCHMARK_STORAGE }}/toqito/full \
        --benchmark-verbose \
        -v --tb=long"

        echo "üîß Executing: $PYTEST_CMD currently in $(pwd)"
        eval "$PYTEST_CMD"
